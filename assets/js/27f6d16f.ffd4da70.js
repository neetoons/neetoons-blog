"use strict";(self.webpackChunkneetoons_blog=self.webpackChunkneetoons_blog||[]).push([[2403],{4845:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>t,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"El lenguaje Pawn/Arrays","title":"Arrays","description":"Esta genial guardar datos en variables pero, que pasa si queremos guardar un grupo de datos en 1 variable, como por ejemplo una lista, pues si podemos","source":"@site/docs/El lenguaje Pawn/3 - Arrays.md","sourceDirName":"El lenguaje Pawn","slug":"/El lenguaje Pawn/Arrays","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/El lenguaje Pawn/3 - Arrays.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Variables","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Variables"},"next":{"title":"Strings","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Strings"}}');var s=n(4848),o=n(8453);const i={},l=void 0,t={},d=[{value:"sizeof operator",id:"sizeof-operator",level:3}];function c(e){const a={br:"br",code:"code",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.p,{children:"Esta genial guardar datos en variables pero, que pasa si queremos guardar un grupo de datos en 1 variable, como por ejemplo una lista, pues si podemos"}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"\xbfQu\xe9 es un array?"}),(0,s.jsx)(a.br,{}),"\n","Un array es como si defini\xe9ramos muchas variables y las uni\xe9ramos todas, de esta forma tendr\xedamos una sucesi\xf3n de variables, en las cuales podr\xedamos almacenar varios datos (1 dato por variable)."]}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"C\xf3mo defino un array?"}),(0,s.jsx)(a.br,{}),"\n","La forma de definir un array es muy sencilla, de hecho es casi igual que definir una variable."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-cpp",children:"new MiArray[4];\n"})}),"\n",(0,s.jsx)(a.p,{children:"Como pueden ver, solo varia [n]; en este caso, n=4. Pero... \xbfQu\xe9 representa 'n'? 'n' representa el tama\xf1o de ese array, es decir la cantidad de datos que podemos almacenar."}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"\xbfC\xf3mo utilizo un array?"}),(0,s.jsx)(a.br,{}),"\n","Para utilizar un array, lo que hacemos es almacenar o leer los datos indicando la posici\xf3n que ocupa el mismo (Las posiciones o indices comienzan en 0 y van hasta n-1)."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-cpp",children:"new MiArray[3];\n//Asignaci\xf3n:\n//Asignamos el valor '1' en el index 0 de nuestro array\nMiArray[0] = 1;\n//Asignamos el valor '50' en el index 1 de nuestro array\nMiArray[1] = 50;\n//Lectura:\n//Accedemos al valor almacenado en el index 0\nprintf(\"El valor almacenado en el index 0 de MiArray es %i\", MiArray[0]);\n"})}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"Importante:"}),"\xa0A la hora de definir un array, debemos tener en cuenta, que este nunca puede tomar el valor de la definici\xf3n."]}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.code,{children:"Ejemplo 1:"})}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-cpp",children:"new Array[5];\n//esto causara un error, dado que el \xedndex m\xe1ximo de Array es 4\nArray[5] = 4;\n"})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.code,{children:"Ejemplo 2:"})}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-cpp",children:"new MiArray[4];\n//Asignaci\xf3n\n//Realizamos una asignaci\xf3n multiple, para realizar esto, colocamos entre llaves ('{' & '}') los valores separados por una coma\nMiArray = {1, 5, 8, 10};\n\n//Lectura\nprintf(\"Valores del array 0-3: %d %d %d %d\", MiArray[0], MiArray[1], MiArray[2], MiArray[3]);\n"})}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"Importante:"}),"\xa0Cuando realizamos una asignaci\xf3n m\xfaltiple, esta debe ser completa, es decir debemos asignar un valor a cada index (lugarcito) de nuestro array."]}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"\xbfPodemos definir arrays con tags? Y si es asi \xbfCu\xe1les son los tags de los arrays?"}),(0,s.jsx)(a.br,{}),"\n","Los mismos tags que tienen las variables, y se los especifica de igual forma:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-cpp",children:"new tag:nombre[tama\xf1o];\n"})}),"\n",(0,s.jsx)(a.h3,{id:"sizeof-operator",children:"sizeof operator"}),"\n",(0,s.jsx)(a.p,{children:"The sizeof operator returns the size of a variable in \u201celements\u201d. For a simple (non-compound) variable, the result of sizeof is always 1, because an element is a cell for a simple variable."}),"\n",(0,s.jsxs)(a.p,{children:["An array with one dimension holds a number of cells and the sizeof operator returns that number. The snippet below would therefore print \u201c5\u201d at",(0,s.jsx)(a.br,{}),"\n","the display, because the array \u201cmsg\u201d holds four characters (each in one cell) plus a zero-terminator:"]}),"\n",(0,s.jsx)(a.p,{children:"Listing: sizeof operator"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-cpp",children:'new msg[] = "Help"\nprintf("%d", sizeof msg);\n'})}),"\n",(0,s.jsxs)(a.p,{children:["With multi-dimensional arrays, the sizeof operator can return the number of elements in each dimension. For the last (minor) dimension, an",(0,s.jsx)(a.br,{}),"\n","element will again be a cell, but for the major dimension(s), an element is a sub-array. In the following code snippet, observe that the syntax sizeof matrix refers to the major dimension of the two-dimensional array and the syntax sizeof matrix[] refers to the minor dimension of the array. The values that this snippet prints are 3 and 2 (for the major and minor dimensions respectively):"]}),"\n",(0,s.jsx)(a.p,{children:"Listing: sizeof operator and multidimensional arrays"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-cpp",children:'ew matrix[3][2] = { { 1, 2 }, { 3, 4 }, { 5, 6 } }\nprintf("%d %d", sizeof matrix, sizeof matrix[]);\n'})}),"\n",(0,s.jsx)(a.p,{children:"The application of the sizeof operator on multi-dimensional arrays is especially convenient when used as a default value for function arguments."}),"\n",(0,s.jsx)(a.hr,{}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.code,{children:"Default function arguments and sizeof: 77"})})]})}function u(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>l});var r=n(6540);const s={},o=r.createContext(s);function i(e){const a=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:a},e.children)}}}]);