"use strict";(self.webpackChunkneetoons_blog=self.webpackChunkneetoons_blog||[]).push([[9684],{3855:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"El lenguaje Pawn/Control de Flujo","title":"Control de Flujo","description":"Sentencias, Expresiones y estructuras (condicionales y no condicionales)","source":"@site/docs/El lenguaje Pawn/12 - Control de Flujo.md","sourceDirName":"El lenguaje Pawn","slug":"/El lenguaje Pawn/Control de Flujo","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Control de Flujo","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/El lenguaje Pawn/12 - Control de Flujo.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Caracteres especiales","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Caracteres especiales"},"next":{"title":"Inicializadores","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Inicializadores"}}');var i=a(4848),r=a(8453);const l={},o=void 0,c={},d=[{value:"\xbfQu\xe9 es una sentencia?",id:"qu\xe9-es-una-sentencia",level:3},{value:"\xbfQu\xe9 es una expresi\xf3n?",id:"qu\xe9-es-una-expresi\xf3n",level:3},{value:"\xbfCu\xe1les son las expresiones que existen y c\xf3mo se utilizan?",id:"cu\xe1les-son-las-expresiones-que-existen-y-c\xf3mo-se-utilizan",level:3},{value:"<code>if</code>",id:"if",level:3},{value:"<code>else</code>",id:"else",level:3},{value:"<code>else if</code>",id:"else-if",level:3},{value:"<code>Operador Ternario</code>",id:"operador-ternario",level:2},{value:"<code>for</code>",id:"for",level:3},{value:"<code>while</code>",id:"while",level:3},{value:"<code>break</code>",id:"break",level:3},{value:"<code>continue</code>",id:"continue",level:3},{value:"<code>return</code>",id:"return",level:3},{value:"<code>assert</code>",id:"assert",level:3},{value:"<code>Switch</code>",id:"switch",level:3},{value:"<code>default</code>",id:"default",level:2}];function t(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Sentencias, Expresiones y estructuras (condicionales y no condicionales)"}),"\n",(0,i.jsx)(n.h3,{id:"qu\xe9-es-una-sentencia",children:"\xbfQu\xe9 es una sentencia?"}),"\n",(0,i.jsx)(n.p,{children:"Es la unidad mas peque\xf1a de c\xf3digo que puede ser ejecutada, es decir, cada linea de c\xf3digo es una sentencia."}),"\n",(0,i.jsx)(n.h3,{id:"qu\xe9-es-una-expresi\xf3n",children:"\xbfQu\xe9 es una expresi\xf3n?"}),"\n",(0,i.jsx)(n.p,{children:"Una expresi\xf3n es una combinaci\xf3n de constantes, variables/arrays, funciones, y/o operadores, que son evaluadas seg\xfan los par\xe1metros indicados (si no entienden, no se preocupen pues al ver los ejemplos sera intuitivo)."}),"\n",(0,i.jsx)(n.h3,{id:"cu\xe1les-son-las-expresiones-que-existen-y-c\xf3mo-se-utilizan",children:"\xbfCu\xe1les son las expresiones que existen y c\xf3mo se utilizan?"}),"\n",(0,i.jsx)(n.p,{children:"Existen infinitas expresiones, pues son una combinaci\xf3n de constantes, variables/arrays, funciones, y/o operadores. Para evaluar estas expresiones, existen 16 estructuras condicionales las cuales veremos a lo largo de ese tutorial."}),"\n",(0,i.jsx)(n.h3,{id:"if",children:(0,i.jsx)(n.code,{children:"if"})}),"\n",(0,i.jsx)(n.p,{children:"Es una de las estructuras m\xe1s importantes y simples, se utiliza para comparar, y seg\xfan el resultado de la comparaci\xf3n, se realiza o no una determinada acci\xf3n."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Ejemplo:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"public OnPlayerConnect(playerid)\n{\n    new\n        rnd = random(2);\n\n    if(rnd == 0)\n        SendClientMessage(playerid, 0x00FF00FF, \"Bienvenido al servidor\");//Este c\xf3digo solo se ejecutara si la variable 'rnd' es igual a 0\n\n    return 1;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Ejemplo 2"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"public OnPlayerConnect(playerid)\n{\n    new\n        rnd = random(2);\n\n    if(rnd == 0)\n    {\n        //Este codigo (siguientes 2 lineas) solo se ejecutara si la variable 'rnd' es igual a 0\n        SendClientMessage(playerid, 0xFF0000FF, \"Fuera de mi servidor\");\n        Kick(playerid);\n    }\n\n    return 1;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Nota:"}),"\xa0Cuando el c\xf3digo a ejecutar, si la comparaci\xf3n es verdadera, es 1 sola sentencia (ejemplo 1), no es necesario usar llaves; de lo contrario se deben colocar los mismos (ejemplo 2)."]}),"\n",(0,i.jsx)(n.h3,{id:"else",children:(0,i.jsx)(n.code,{children:"else"})}),"\n",(0,i.jsx)(n.p,{children:"Es al igual que 'if' una de las estructuras m\xe1s importantes, y tambi\xe9n una de las m\xe1s utilizadas. Su uso va con la estructura vista anteriormente (sin excepci\xf3n) y ejecuta una acci\xf3n \xfanicamente cuando la expresi\xf3n en el if es falsa."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"Estado(playerid)\n{\n    if(IsPlayerConnected(playerid) == 1)\n    {\n        //Este codigo solo se ejecutara si la funci\xf3n 'IsPlayerConnected' retorna el valor 1 (el jugador cuyo id es el valor de la variable 'playerid' esta conectado).\n        printf(\"El jugador %i est\xe1 conectado\", playerid);\n    }\n    else\n    {\n        //Este codigo solo se ejecutara si la funci\xf3n 'IsPlayerConnected' retorna el valor 0 (el jugador cuyo id es el valor de la variable 'playerid' esta desconectado).\n        printf(\"El jugador %i esta desconectado\", playerid);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"else-if",children:(0,i.jsx)(n.code,{children:"else if"})}),"\n",(0,i.jsx)(n.p,{children:"Es una combinaci\xf3n de las 2 estructuras vistas anteriormente."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'Dinero(playerid)\n{\n    new\n        money = GetPlayerMoney(playerid);\n\n    if(money >= 10000)\n        printf("El jugador %i tiene $10.000 o mas!", playerid);\n    else if(0 <= money < 10000)\n        printf("El jugador %i tiene entre $0 y $10.000", playerid);\n    else\n        printf("El jugador %i tiene menos de $0", playerid);\n}\n//Nota: "else if(0 <= money < 10000)" es equivalente a "else if(0 <= money && money < 10000)"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"operador-ternario",children:(0,i.jsx)(n.code,{children:"Operador Ternario"})}),"\n",(0,i.jsx)(n.p,{children:'Es muy similar a if, else. Si A="true" retorna B, de lo contrario retorna C'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'printf("Admin: %s", (Sinfo[Admin]) ? ("ON") : ("OFF"));\n'})}),"\n",(0,i.jsx)(n.h3,{id:"for",children:(0,i.jsx)(n.code,{children:"for"})}),"\n",(0,i.jsx)(n.p,{children:"Es una forma de definir un loop(bucle) que consiste en tres pasos. El 1\xba consiste en la iniciaci\xf3n, el 2\xba es la comparaci\xf3n y el 3\xba es la renovaci\xf3n (cada paso se separa por ';')."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'for(new i; i<100; i++)  \n{  \n\xa0 \xa0 printf("N\xfamero: %d", i);  \n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"while",children:(0,i.jsx)(n.code,{children:"while"})}),"\n",(0,i.jsx)(n.p,{children:"Es otra forma de crear un loop muy similar a la anterior."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'new  \n\xa0 \xa0 i;  \n  \nwhile(i < 100)  \n{  \n\xa0 \xa0 printf("N\xfamero: %d", i);  \n\xa0 \xa0 i++;//Dado que solo hay una comparaci\xf3n, debemos ser nosotros quienes modifiquemos el valor del contador  \n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"break",children:(0,i.jsx)(n.code,{children:"break"})}),"\n",(0,i.jsx)(n.p,{children:"Se utiliza para terminar con un bucle"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'for(new i; i<10; i++){  \n\xa0 \xa0 if(i==5)  \n\xa0 \xa0 \xa0 \xa0 continue;  \n  \n\xa0 \xa0 printf("%i", i);  \n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"continue",children:(0,i.jsx)(n.code,{children:"continue"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'for(new i; i<10; i++){  \n\xa0 \xa0 if(i==5)  \n\xa0 \xa0 \xa0 \xa0 continue;  \n  \n\xa0 \xa0 printf("%i", i);  \n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"return",children:(0,i.jsx)(n.code,{children:"return"})}),"\n",(0,i.jsx)(n.p,{children:"Se utiliza para retornar un valor de una funci\xf3n/callback, o bien para salir/interrumpir la ejecuci\xf3n misma (no se ejecutara el c\xf3digo que este luego de esta estructura)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"IsValidPlayer(playerid)  \n{  \n\xa0 \xa0 if(playerid == INVALID_PLAYER_ID || !IsPlayerConnected(playerid))  \n\xa0 \xa0 \xa0 \xa0 return false;  \n\xa0 \xa0 return true;  \n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"assert",children:(0,i.jsx)(n.code,{children:"assert"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'public OnFilterScriptInit()\n{\n    new\n        num = random(100);\n\n    assert(num > 50);\n    printf("%i", num);\n\n    return 1;\n}\n\n//Equivalencia utilizando un if\npublic OnFilterScriptInit()\n{\n    new\n        num = random(100);\n\n    if(num < 50)\n        return;\n    printf("%i", num);\n\n    return 1;\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"switch",children:(0,i.jsx)(n.code,{children:"Switch"})}),"\n",(0,i.jsx)(n.p,{children:"Estas expresiones, van siempre juntas y se utilizan para realizar comparaciones en las cuales se quiere que seg\xfan el valor, se realice una acci\xf3n. Puede ser reemplazada por if, else if, else if, else, pero usando if ser\xeda m\xe1s lenta y menos efectiva."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'switch(variable)  \n{  \n\xa0 \xa0 case 0:  \n\xa0 \xa0 \xa0 \xa0 print("0");  \n\xa0 \xa0 case 1:  \n\xa0 \xa0 \xa0 \xa0 print("1");  \n\xa0 \xa0 case 2:  \n\xa0 \xa0 {  \n\xa0 \xa0 \xa0 \xa0 print("2");  \n\xa0 \xa0 }  \n\xa0 \xa0 case 3, 4:  \n\xa0 \xa0 \xa0 \xa0 print("3 o 4");  \n\xa0 \xa0 case 5 .. 10:  \n\xa0 \xa0 \xa0 \xa0 print("5 a 10");  \n\xa0 \xa0 default:  \n\xa0 \xa0 \xa0 \xa0 print("El valor de \'variable\' es mayor a 10 o menor a 0");  \n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Importante:"}),'\xa0cuando luego de la expresi\xf3n "case" sigue una sola l\xednea, o un if(sin else/else if) la expresi\xf3n puede ir libre de brakets, de lo contrario es necesario colocarlos.']}),"\n",(0,i.jsx)(n.h2,{id:"default",children:(0,i.jsx)(n.code,{children:"default"})}),"\n",(0,i.jsx)(n.p,{children:"default handles switch statement results which aren't handled explicitly by case statements. See the case example for an example."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>o});var s=a(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);