"use strict";(self.webpackChunkneetoons_blog=self.webpackChunkneetoons_blog||[]).push([[3192],{7496:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>t,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"El lenguaje Pawn/Tags","title":"Tags","description":"\xbfEntonces en las variables solo podemos almacenar n\xfameros enteros? Por el momento diremos que no, para poder almacenar otros datos como por ejemplo n\xfameros decimales, utilizaremos \'Tags\'.","source":"@site/docs/El lenguaje Pawn/9 - Tags.md","sourceDirName":"El lenguaje Pawn","slug":"/El lenguaje Pawn/Tags","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Tags","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/El lenguaje Pawn/9 - Tags.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Alcance de una variable","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Alcance de una variable"},"next":{"title":"Operadores","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Operadores"}}');var o=n(4848),r=n(8453);const l={},i="Como usar tags en Pawn",t={},c=[{value:"Tipos de Datos",id:"tipos-de-datos",level:2},{value:"Tags",id:"tags",level:2},{value:"Tags d\xe9biles y tags fuertes",id:"tags-d\xe9biles-y-tags-fuertes",level:2},{value:"Funciones con tags",id:"funciones-con-tags",level:2},{value:"Ejemplo con a_samp",id:"ejemplo-con-a_samp",level:2},{value:"Variables sin Tags",id:"variables-sin-tags",level:2},{value:"Printf",id:"printf",level:2}];function d(e){const a={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.p,{children:"\xbfEntonces en las variables solo podemos almacenar n\xfameros enteros? Por el momento diremos que no, para poder almacenar otros datos como por ejemplo n\xfameros decimales, utilizaremos 'Tags'."}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"\xbfQu\xe9 es un tag y cu\xe1les existen?"}),(0,o.jsx)(a.br,{}),"\n","Un tag es un pedacito de c\xf3digo, que informa al compilador el tipo de dato que se almacenara en esa variable."]}),"\n",(0,o.jsx)(a.header,{children:(0,o.jsx)(a.h1,{id:"como-usar-tags-en-pawn",children:"Como usar tags en Pawn"})}),"\n",(0,o.jsx)(a.h2,{id:"tipos-de-datos",children:"Tipos de Datos"}),"\n",(0,o.jsx)(a.p,{children:"Para empezar a entender los tags en Pawn tenemos que saber un concepto b\xe1sico ya que la programaci\xf3n consiste en hacer operaciones con datos: operaciones con n\xfameros, operaciones con textos y condicionales. Pero no todos datos no son todos iguales porque puedes sumar dos n\xfameros pero no un n\xfamero y un texto. Esto introduce el concepto de tipado en la programaci\xf3n. Es decir, diferenciar los tipos de datos para saber qu\xe9 operaciones podemos y no podemos hacer con ellos.\xa0"}),"\n",(0,o.jsx)(a.p,{children:"Pawn si bien parece que tiene tipos de datos, ya sea enteros, decimales, booleanos, textos y estructuras de datos, t\xe9cnicamente no tiene tipos de datos, la cuesti\xf3n es que Pawn al no tener tipos de datos, todo se resume en celdas ya que es un lenguaje hecho para ser peque\xf1o, limitado y simple.\xa0"}),"\n",(0,o.jsx)(a.h2,{id:"tags",children:"Tags"}),"\n",(0,o.jsx)(a.p,{children:"Ahora sabiendo esto, Pawn te da una forma de darle cierto tipado al lenguaje, es ahi donde entran los tags (etiquetas en espa\xf1ol), en donde anteriores tutoriales los hemos usado, un tag es un prefijo que va antes de las variables que permite indicar al compilador que trate la variable de manera especial en determinadas circunstancias. Los tags que hemos usado en los pasados v\xeddeos han sido los siguientes:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"Float:   // Para n\xfameros decimales\nbool:   // datos booleanos (true o false)\nnew DB:handle // tag personalizado\n"})}),"\n",(0,o.jsx)(a.p,{children:"Ten en cuenta que handle en este ejemplo es el nombre de la variable y DB es el tag que a esta se le coloca, pawn al permitir tags personalizados te permite asignarle cualquier nombre al tag."}),"\n",(0,o.jsx)(a.p,{children:"Otro tag que quiz\xe1s conozcas que viene de la libreria de a_mysql:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"new MySQL:handle;\n"})}),"\n",(0,o.jsx)(a.p,{children:'En pawn, bool y Float son tags predefinidos (para usar Float debes usar una librer\xeda que implemente el uso de n\xfameros racionales "Float", en samp ya viene en la librer\xeda a_samp y sino en el include float.inc). Yendonos a la practica entendemos que los tags nos ayudan a asegurar que una variable siempre sea usada de determinadas circunstancias, por ejemplo. veamoslo en el codigo.'}),"\n",(0,o.jsx)(a.p,{children:"Lo primero, un tag es una prefijo, es un prefijo porque va siempre al principio de una variable, una vez declara en una variable no hace falta colocarla de nuevo:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"new Float:MiVariable;\nMiVariable = 1.000;\n"})}),"\n",(0,o.jsx)(a.p,{children:"Ahora si intentamos cambiar la variable a otro tipo de dato nos va a dar una advertencia:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"MiVariable = true;\n//warning 213: tag mismatch\n"})}),"\n",(0,o.jsx)(a.p,{children:"Por lo que debemos respetar los tags de las variables."}),"\n",(0,o.jsx)(a.h2,{id:"tags-d\xe9biles-y-tags-fuertes",children:"Tags d\xe9biles y tags fuertes"}),"\n",(0,o.jsx)(a.p,{children:"Si estuviste atento o atenta notaste que entre estos tags hay uno en particular que tiene la primera letra en min\xfascula, bool, este en particular lo dejamos com\xfanmente siempre as\xed, lo importante es saber que hay dos tipos de tags: tags fuertes (que comienzan con una letra may\xfascula) y tags d\xe9biles (que comienzan con una letra min\xfascula)."}),"\n",(0,o.jsx)(a.p,{children:"En la mayor\xeda del tiempo son iguales. El compilador no recibir\xe1 una advertencia, la mayor\xeda de las veces no sucede con tags d\xe9biles y si todo el tiempo con tags fuertes, cambiar impl\xedcitamente la etiqueta generar\xe1 una advertencia que le indicar\xe1 que es probable que los datos se est\xe9n usando incorrectamente."}),"\n",(0,o.jsx)(a.p,{children:"Un ejemplo muy sencillo es el siguiente:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"new\n\tFuerte:VariableFuerte,\n\tdebil:VariableDebil,\n\tVariableVacia;\nVariableVacia = VariableFuerte; // Warning\nVariableVacia = VariableDebil; // No warning\n// Sin embargo no funciona al rev\xe9s:\nVariableDebil = VariableVacia; // Warning\n"})}),"\n",(0,o.jsx)(a.h2,{id:"funciones-con-tags",children:"Funciones con tags"}),"\n",(0,o.jsx)(a.p,{children:"A las funciones tambi\xe9n se le puede colocar tags como tambi\xe9n hacer que devuelvan datos con esos tags. Para hacerlo es muy simple, simplemente coloca el tag antes del nombre de la funci\xf3n, por ejemplo:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"Float:CalcularAreaCirculo(Float:radio)\n {\n  // Constante pi\n  new Float:PI = 3.1415926535;   \n\n  // C\xe1lculo del \xe1rea\n  new Float:area = PI * radio * radio;\n  \n  // Devolver el \xe1rea\n  return area;\n}\n"})}),"\n",(0,o.jsx)(a.p,{children:"Las funciones con tags deben estar declaradas antes de donde se llaman/invocan, si no lo hacemos no saldr\xe1 esta advertencia:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"warning 208: function with tag result used before definition, forcing reparse\n"})}),"\n",(0,o.jsx)(a.p,{children:"Implementaci\xf3n de las funciones con tag:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'main()\n{\n  new Float:result = CalcularAreaCirculo(5.0);\n  printf("%f", result);\n  return 0;\n}\n'})}),"\n",(0,o.jsx)(a.p,{children:"Resultado:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"78.539817\n"})}),"\n",(0,o.jsx)(a.p,{children:"Como ver\xe1s, si queremos guardar en una variable el resultado debemos crearla con el tag Float ya que el resultado viene con esa tag porque es un dato decimal. Entonces entendemos que los tags permiten al compilador verificar que se asignen valores compatibles a las variables y evitar errores de tipo de dato durante el tiempo de compilaci\xf3n y ejecuci\xf3n. Rara vez tendr\xe1s que crear funciones como estas pero si usarlas."}),"\n",(0,o.jsx)(a.h2,{id:"ejemplo-con-a_samp",children:"Ejemplo con a_samp"}),"\n",(0,o.jsxs)(a.p,{children:["Vamos a ver un ejemplo con la libreria de a_samp de SA",":MP",", espec\xedficamente con la creaci\xf3n de los TextDraws que son una forma de mostrar texto y figuras en la pantalla, a_samp nos da esta funci\xf3n llamada ",(0,o.jsx)(a.strong,{children:"CreatePlayerTextDraw"})," que como ver\xe1s si sabes ingles es una funcion para crearlas, como podemos ver tiene la palabra native, esto lo puedes ignorar ya que es una palabra clave para definir funciones que se comuniquen con la aplicaci\xf3n, en este caso samp-server.exe, esta funci\xf3n tiene como tag PlayerText, es decir, devuelve datos de tipo PlayerText:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"native PlayerText:CreatePlayerTextDraw(playerid, Float:x, Float:y, text[]);\n"})}),"\n",(0,o.jsx)(a.p,{children:"En la implementaci\xf3n la veremos asi:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'// Esta variable la usamos para guardar la id del textdraw\n// Como CreatePlayerTextDraw solo se puede usar con el tag PlayerText entonces creamos una variable con dicho tag:\nnew PlayerText:welcomeText[MAX_PLAYERS];\n\npublic OnPlayerConnect(playerid)\n{\n\t// Primero, creamos el textdraw\n    welcomeText[playerid] = CreatePlayerTextDraw(playerid, 320.0, 240.0, "Bienvenido");\n\xa0\n\t//Y lo mostramos\n    PlayerTextDrawShow(playerid, welcomeText[playerid]);\n\treturn 0;\n}\n'})}),"\n",(0,o.jsxs)(a.p,{children:["Si vemos como esta declarada ",(0,o.jsx)(a.strong,{children:"PlayerTextDrawShow"})," que es una funci\xf3n para mostrar los textdraws veremos que para usarla tenemos que pasar por argumento una variable con un tag ",(0,o.jsx)(a.strong,{children:"PlayerText"}),":"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"native PlayerTextDrawShow(playerid, PlayerText:text);\n"})}),"\n",(0,o.jsx)(a.p,{children:"Es de esta que podemos entender como usar las funciones que requieren variables con tags espec\xedficos, si lo piensas bien no es complicado sin embargo es un poco molesto pero estas molestias nos ahorran molestias en producci\xf3n cuando nuestro programa este corriendo."}),"\n",(0,o.jsx)(a.h2,{id:"variables-sin-tags",children:"Variables sin Tags"}),"\n",(0,o.jsx)(a.p,{children:"Ahora quiz\xe1s te preguntes, que ocurre con las variables que no tienen tag, bueno estas impl\xedcitamente se crean siendo un tipo de dato num\xe9rico con el valor de 0, es por eso que no hace falta asignarle 0 cuando queremos hacer un ciclo for:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'for(new i; i < 10; i++)\n{\n\tprintf("%d", i);\n}\n'})}),"\n",(0,o.jsxs)(a.p,{children:["Como ver\xe1s no hace falta asignarle ",(0,o.jsx)(a.code,{children:"new i = 0;"}),"porque es redundante, sin embargo, es a gusto de cada qui\xe9n ya que algunos dicen que es mejor ser m\xe1s explicito. Como anteriormente describ\xed, las variables vac\xedas sin tag dar\xe1n warning si les intentas asignar una variable con tag fuerte pero no dar\xe1n warning si le asignas una variable d\xe9bil, por otro lado, una variable d\xe9bil no le puedes asignar una variable vac\xeda. Gracias a los tags no te tendr\xe1s que preocupar por bugs en producci\xf3n ya que las librer\xedas suelen usar en su mayor\xeda o sino todas tags fuertes as\xed que tendr\xe1s warnings si los usas incorrectamente, es por eso que no debes dejar ning\xfan warning en la compilaci\xf3n."]}),"\n",(0,o.jsx)(a.h2,{id:"printf",children:"Printf"}),"\n",(0,o.jsxs)(a.p,{children:["La funci\xf3n printf que est\xe1 hecha para imprimir textos en la consola y otras similares como format tienen algo en particular y es que en su uso solo acepta ciertos tags en las variables y lo podemos ver en sus declaraciones cuando vemos ",(0,o.jsx)(a.code,{children:"{Float,_}"}),":"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"native printf(const format[], {Float,_}:...);\nnative format(output[], len, const format[], {Float,_}:...);\n"})}),"\n",(0,o.jsx)(a.p,{children:"En caso de no pasarles una variable com\xfan como Float, un n\xfamero o un texto nos dar\xe1 un warning:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'#include <a_samp>\nmain(){\n\tnew DB:DatabaseID;\n\tprintf("%d", DatabaseID);\n}\n//warning 213: tag mismatch: expected tags "Float", or none ("_"); but found "DB"\n'})}),"\n",(0,o.jsxs)(a.p,{children:["Para evitar este warning al querer imprimir un dato que tiene un tag personalizado debemos forzarlo coloc\xe1ndole un ",(0,o.jsx)(a.code,{children:"_"})," como tag:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'#include <a_samp>\nmain(){\n\tnew DB:DatabaseID;\n\tprintf("%d", _:DatabaseID);\n}\n'})}),"\n",(0,o.jsx)(a.p,{children:"Hay mucho sobre los tags pero esto es lo m\xe1s importante y com\xfan que ver\xe1s programando con Pawn."})]})}function u(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>l,x:()=>i});var s=n(6540);const o={},r=s.createContext(o);function l(e){const a=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(r.Provider,{value:a},e.children)}}}]);