"use strict";(self.webpackChunkneetoons_blog=self.webpackChunkneetoons_blog||[]).push([[1507],{5617:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"El lenguaje Pawn/Alcance de una variable","title":"Alcance de una variable","description":"\xbfQu\xe9 es el alcance de una variable/array?","source":"@site/docs/El lenguaje Pawn/8 - Alcance de una variable.md","sourceDirName":"El lenguaje Pawn","slug":"/El lenguaje Pawn/Alcance de una variable","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Alcance de una variable","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/El lenguaje Pawn/8 - Alcance de una variable.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Callbacks","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Callbacks"},"next":{"title":"Tags","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Tags"}}');var l=a(4848),s=a(8453);const o={},t=void 0,c={},i=[];function d(e){const n={br:"br",code:"code",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"\xbfQu\xe9 es el alcance de una variable/array?"}),(0,l.jsx)(n.br,{}),"\n","El alcance (scope en ingles) de una variable/array hace referencia al \xe1rea/entorno dentro de la cual se puede utilizar la misma.",(0,l.jsx)(n.br,{}),"\n","Estos entornos se encuentran definidas por las llaves."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Local"}),(0,l.jsx)(n.br,{}),"\n","Solo puede ser utilizada dentro del entorno en el cual es declarada(ej.: Callbacks, funciones, if, etc.). Para declarar una variable/array de este tipo, la declaraci\xf3n debe ser realizada dentro del entorno en el que se desea usar la variable/array."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'public OnPlayerConnect(playerid)\n{\n    new\n        str[32+MAX_PLAYER_NAME],\n        name[MAX_PLAYER_NAME];//declaraci\xf3n de los arrays locales\n\n    GetPlayerName(playerid, name, MAX_PLAYER_NAME);\n    format(str, sizeof(str), ">>%s(%i) ha ingresado en el servidor", name, playerid);\n    SendClientMessageToAll(0xFFFF00FF, str);\n\n    return 1;\n}\n\npublic OnPlayerDisconnect(playerid, reason)\n{\n    GetPlayerName(playerid, name, MAX_PLAYER_NAME);\n    format(str, sizeof(str), ">>%s(%i) ha dejado el servidor", name, playerid);\n    SendClientMessageToAll(0xFFFF00FF, str);\n\n    return 1;\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Local declarations"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"A local declaration appears inside a compound statement. A local variable can only be accessed from within the compound statement, and from nested compound statements. A declaration in the first expression of a for loop instruction is also a local declaration."})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Global declarations"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"A global declaration appears outside a function and a global variable is accessible to any function. Global data objects can only be initialized with constant expressions."})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>t});var r=a(6540);const l={},s=r.createContext(l);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);