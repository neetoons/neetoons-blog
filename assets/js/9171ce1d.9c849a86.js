"use strict";(self.webpackChunkneetoons_blog=self.webpackChunkneetoons_blog||[]).push([[5894],{3909:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"El lenguaje Pawn/Strings empaquetados","title":"Strings empaquetados","description":"\xbfQu\xe9 son los strings empaquetados?","source":"@site/docs/El lenguaje Pawn/14 - Strings empaquetados.md","sourceDirName":"El lenguaje Pawn","slug":"/El lenguaje Pawn/Strings empaquetados","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Strings empaquetados","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/El lenguaje Pawn/14 - Strings empaquetados.md","tags":[],"version":"current","sidebarPosition":14,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Inicializadores","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Inicializadores"},"next":{"title":"Operadores miscel\xe1neos","permalink":"/neetoons-blog/docs/El lenguaje Pawn/Operadores miscel\xe1neos"}}');var r=a(4848),o=a(8453);const t={},l=void 0,i={},c=[];function d(e){const n={a:"a",br:"br",code:"code",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\xbfQu\xe9 son los strings empaquetados?"}),(0,r.jsx)(n.br,{}),"\n","Los strings empaquetados (packed strings en ingles) son cadenas de texto que guardan 1 car\xe1cter por byte; los strings normales guardan un car\xe1cter por cell (4 ytes), por lo que utilizando strings empaquetados, guardamos bastante espacio."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"La trampa"}),(0,r.jsx)(n.br,{}),"\n","El problema que tienen los strings empaquetados es que como tenemos 1/4 del tama\xf1o original para guardar los datos, cada car\xe1cter solo puede estar en la tabla ASCII original, o lo que es lo mismo",(0,r.jsx)(n.br,{}),"\n","el valor almacenado no puede salir del rango 0-255. Cualquier valor que este fuera de dicho rango solo saltara y caer\xe1 dentro del mismo."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"El valor 300 salta y se convierte en 44; esto se debe a que 300 es mayor a 255 entonces el por la forma de almacenar utilizada en los strings empaquetados se pierde informaci\xf3n. Una forma simple de calcular el valor\nque se guardara (cuando el valor supera el numero 255) es: valor - 256.\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Nota:"}),"\xa0Los strings empaquetados utilizan la codificaci\xf3n Little Endian para almacenar los datos."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\xbfC\xf3mo se utilizan?"}),(0,r.jsx)(n.br,{}),"\n",'A diferencia de los strings/arrays normales, cuando se definen luego de ingresar el tama\xf1o se agrega la palabra "char".']}),"\n",(0,r.jsx)(n.p,{children:"Asignaci\xf3n:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"new  \n\xa0 \xa0 StringNormal[5], \xa0 \xa0 \xa0 \xa0//Este es un string de 5 cells o 20 bytes  \n\xa0 \xa0 StringPacked[5 char]; \xa0 //Este es un string de 2 cells u 8 bytes  \n  \nmain()  \n{  \n\xa0 \xa0 StringNormal = \"hola\";  \n\xa0 \xa0 StringPacked = !\"hola\";//Para indicar que el contenido debe ser empaquetado, colocamos el '!' delante del string.  \n  \n\xa0 \xa0 StringNormal[0] = 'H';  \n\xa0 \xa0 StringPacked{0} = 'H';//Notese que utilizamos llaves para acceder y no corchetes.  \n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Si se est\xe1n preguntando porque el string empaquetado no es de 5 bytes, esto es porque se redondea al m\xfaltiplo de 4 SUPERIOR mas cercano (1 es 4, 3 es 4, 4 es 8 y asi)."}),"\n",(0,r.jsx)(n.p,{children:"A continuaci\xf3n veremos la lectura de datos, la cual dado que nativamente SA-MP no tiene mucho soporte para estos arrays, se vuelve algo tedioso."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'new StringPacked[5 char];  \n  \nmain()  \n{  \n\xa0 \xa0 new  \n\xa0 \xa0 \xa0 \xa0 tmp[128];  \n  \n\xa0 \xa0 strpack(StringPacked, "Hola");  \n\xa0 \xa0 strunpack(tmp, StringPacked);  \n  \n\xa0 \xa0 format(tmp, 128, "%s, bienvenidos al servidor", tmp);  \n\xa0 \xa0 SendClientMessage(playerid, -1, tmp);  \n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["**Nota:**Actualmente existe una librer\xeda (creada por Emmet_) la cual permite utilizar format directamente con strings empaquetados:\xa0",(0,r.jsx)(n.a,{href:"http://forum.sa-mp.com/showthread.php?t=481257",children:"link"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\xbfCu\xe1ndo deben usarse strings empaquetados?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Strings utilizados no muy frecuentemente en el script."}),"\n",(0,r.jsx)(n.li,{children:"Strings muy grandes con valores de la tabla ASCII"}),"\n",(0,r.jsx)(n.li,{children:"Para reducir la memoria utilizada"}),"\n",(0,r.jsx)(n.li,{children:"Siempre que se use un array para almacenar n\xfameros y estos sean chicos (valores de 0 a 255)"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>l});var s=a(6540);const r={},o=s.createContext(r);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);